return require 'Q/UTILS/lua/code_gen' {
   declaration = [[
#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>
#include <omp.h>
#include "minmax_struct.h"
//START_FOR_CDEF
extern int
${fn}(  
      const ${ctype} * restrict in,  // [nR] 
      uint64_t nR,
      ${accumulator_ctype} *ptr_args,
      uint64_t offset
      ) 
;
//STOP_FOR_CDEF
]],
definition = [[
#include "${fn}.h"
int
${fn}(  
      const ${ctype} * restrict in,  // [nR] 
      uint64_t nR,
      ${accumulator_ctype} *ptr_args,
      uint64_t offset
      )
{
  int status = 0;

  ${ctype} val = ptr_args->val;
  int64_t     idx = ptr_args->idx;
  // uint32_t nT     = sysconf(_SC_NPROCESSORS_ONLN);
  uint32_t nT = omp_get_num_threads(); 

  if ( offset == 0 ) { val = in[0]; idx = 0; }
  uint64_t block_size = nR / nT;
#pragma omp parallel for schedule(static)
  for ( uint32_t t = 0; t < nT; t++ ) { 

    uint64_t lb = t * block_size;
    uint64_t ub = lb + block_size;
    if ( t == 0               ) { lb =  0; }
    if ( t == (nT-1) ) { ub = nR; }

    ${ctype} lval = in[lb];
    int64_t lidx     = offset + lb;
    for ( uint64_t i  = lb+1; i < ub; i++ ) {  
      ${ctype} inval = in[i];
      if ( inval ${comparator} lval ) {
        lval = inval;
        lidx = offset + i;
      }
    }
#pragma omp critical (_${fn})
    {
      if ( lval ${comparator} val ) {
        val = lval;
        idx = lidx;
      }
      if ( lval ${alt_comparator} val ) {
        if ( lidx < idx ) { 
          idx = lidx;
        }
      }
    }
  }
  ptr_args->val = val;
  ptr_args->idx = idx;
  ptr_args->num += nR;
  return status;
}
]]
}
