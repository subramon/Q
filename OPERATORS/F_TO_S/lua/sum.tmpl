return require 'Q/UTILS/lua/code_gen' {
declaration = [[
#include <stdint.h>
#include <stdio.h>
#include <unistd.h>
#include <stdbool.h>
#include <omp.h>
#include "sum_struct.h"
//START_FOR_CDEF
extern int
${fn}(  
      const ${ctype} * restrict in,  
      uint32_t nR,
      ${accumulator_ctype}  *ptr_args,
      uint32_t unused // for compatibility with min, max, ...
      ) 
;
//STOP_FOR_CDEF
]],
definition = [[
#include "${fn}.h"
int
${fn}(  
      const ${ctype} * restrict in,
      uint32_t nR,  
      ${accumulator_ctype}  *ptr_args,
      uint32_t unused // for compatibility with min, max, ...
      )

{
  int status = 0;
  ${reduce_ctype} sum = 0;
  // uint32_t nT = sysconf(_SC_NPROCESSORS_ONLN);
  uint32_t nT = omp_get_num_threads(); 
  uint32_t block_size = nR / nT;
#pragma omp parallel for schedule(static)
  for ( uint32_t t = 0; t < nT; t++ ) { 
    uint32_t lb = t * block_size;
    uint32_t ub = lb + block_size;
    if ( t == 0               ) { lb = 0;  }
    if ( t == (nT-1) ) { ub = nR; }

    ${reduce_ctype} lsum = 0;
#pragma omp simd reduction(+:lsum)
    for ( uint32_t i  = lb; i < ub; i++ ) {  
      lsum += in[i];
    }
#pragma omp critical (_${fn})
    {
      sum += lsum;
    }
  } 
  ptr_args->val += sum;
  ptr_args->num += nR;
  return status;
}
]]
}
