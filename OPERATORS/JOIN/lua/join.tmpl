return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"

extern int
${fn}(
      const char *join_type_op,
      ${src_lnk_ctype} *src_lnk,
      ${src_fld_ctype} *src_fld,
      uint64_t *ptr_aidx,
      uint64_t nR_src,
      ${dst_lnk_ctype} *dst_lnk,
      ${dst_fld_ctype} *dst_fld,
      uint64_t *nn_dst_fld,
      uint64_t nR_dst,
      uint64_t *ptr_didx,
      uint64_t chunk_size,
      uint64_t idx,
      bool *ptr_is_first
      );
   ]],
   definition = [[

#include "_${fn}.h"
#define EXISTS 1
#define MIN 2
#define MAX 3
#define SUM 4
#define MIN_IDX 5
#define MAX_IDX 6
#define AND 7
#define OR 8
#define ANY 9
#define mcr_max(X, Y)  ((X) > (Y) ? (X) : (Y))
#define mcr_min(X, Y)  ((X) < (Y) ? (X) : (Y))
#define mcr_sum(X, Y)  ((X) + (Y))

int
${fn}(
      const char *join_type_op,
      ${src_lnk_ctype} *src_lnk,
      ${src_fld_ctype} *src_fld,
      uint64_t *ptr_aidx,
      uint64_t nR_src,
      ${dst_lnk_ctype} *dst_lnk,
      ${dst_fld_ctype} *dst_fld,
      uint64_t *nn_dst_fld,
      uint64_t nR_dst,
      uint64_t *ptr_didx,
      uint64_t chunk_size,
      uint64_t idx,
      bool *ptr_is_first
      )
{
  int status = 0;
  bool is_first = *ptr_is_first;
  if ( src_fld == NULL ) { go_BYE(-1); } // not appropriate for operations like "exists", "count" etc
  if ( src_lnk == NULL ) { go_BYE(-1); }
  if ( dst_lnk == NULL ) { go_BYE(-1); }
  if ( nn_dst_fld == NULL ) { go_BYE(-1); }
  if ( nR_src == 0 ) { go_BYE(-1); }
  if ( nR_dst == 0 ) { go_BYE(-1); }
  if ( ptr_aidx == NULL ) { go_BYE(-1); }
  uint16_t join_type = 0;
  if ( strcmp(join_type_op, "exists") == 0 ) { join_type = EXISTS; }
  else if ( strcmp(join_type_op, "min") == 0 )  { join_type = MIN; }
  else if ( strcmp(join_type_op, "max") == 0 )  { join_type = MAX; }
  else if ( strcmp(join_type_op, "sum") == 0 )  { join_type = SUM; }
  else if ( strcmp(join_type_op, "min_idx") == 0 )  { join_type = MIN_IDX; }
  else if ( strcmp(join_type_op, "max_idx") == 0 )  { join_type = MAX_IDX; }
  else if ( strcmp(join_type_op, "any") == 0 )  { join_type = ANY; }
  //else if ( strcmp(join_type_op, "and") == 0 )  { join_type = AND; }
  //else if ( strcmp(join_type_op, "or") == 0 )  { join_type = OR; }
  else { go_BYE(-1); }
  uint64_t lb = *ptr_didx;
  uint64_t ub = nR_dst;
  uint64_t i;
  uint64_t j = *ptr_aidx;
  for ( i = lb; i < ub; ) {
    // If dst_lnk current value is same as previous, re-use earlier result
    if ( ( i > 0 ) && ( dst_lnk[i] == dst_lnk[i-1] ) ) {
      //uint64_t nn_val = get_bit_u64(&nn_dst_fld, i-1);
      //set_bit_u64(&nn_dst_fld, i, nn_val);
      dst_fld[i] = dst_fld[i-1];
      is_first = true;
      i++;
      continue;
    }
    //set_bit_u64(&nn_dst_fld, i, 0);
    for ( ; j < nR_src; ) {
      // if dst_lnk's i th value is greater than src_lnk's nR_src(last index) 
      // i.e. dst_lnk's i th value do not exists in whole src_lnk
      if ( dst_lnk[i] > src_lnk[nR_src-1] ) {
        j = nR_src;
        break;
      }
      if ( src_lnk[j] < dst_lnk[i] ) {
        j++;
      }
      else if ( src_lnk[j] == dst_lnk[i] ) {
        // TODO: set nn_dst_fld for exists join_type
        //set_bit_u64(&nn_dst_fld, i, 1);
        if ( is_first ) {
          if ( ( join_type == MIN_IDX ) || ( join_type == MAX_IDX ) ) {
            //TODO: indexing to start from 1?
            dst_fld[i] = idx + j;
          }
          else {
            dst_fld[i] = src_fld[j];
          }
          is_first = false;
        }
        else {
          if ( join_type == MIN ) {
            dst_fld[i] = mcr_min(dst_fld[i], src_fld[j]);
          }
          else if ( join_type == MAX ) {
            dst_fld[i] = mcr_max(dst_fld[i], src_fld[j]);
          }
          else if ( join_type == SUM ) {
            ${dst_fld_ctype} sum_res = dst_fld[i] + src_fld[j];
            dst_fld[i] =  sum_res;
          }
          else if ( join_type == ANY ) {
            i++;
            is_first = true;
            break;
          }
          //else if ( join_type == AND ) {
          //  dst_fld[i] = dst_fld[i] & src_fld[j];
          //}
          //else if ( join_type == OR ) {
          //  dst_fld[i] = dst_fld[i] | src_fld[j];
          //}
          else if ( join_type == MAX_IDX ) {
              dst_fld[i] = idx + j;
              //dst_fld[i] = offset + j;
          }
        }
        j++;
      }
      else {
        i++;
        //setting "is_first" flag to true for each i th dst_lnk value
        is_first = true;
        break;
      }
    }
    if( j == nR_src ) { break; }
  }
  if ( i == ub ) { i = i - 1; }
  *ptr_aidx = j;
  *ptr_didx = i;
  *ptr_is_first = is_first;
BYE:
  return status;
}
   ]]
}
