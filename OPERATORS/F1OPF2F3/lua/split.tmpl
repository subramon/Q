
return require 'Q/UTILS/lua/code_gen' {

   declaration = [[
#include "q_incs.h"
extern int
${fn}(  
      const ${in_ctype} * restrict in,  
      uint64_t n,  
      int shift,
      ${out_ctype} * restrict out1,
      ${out_ctype} * restrict out2
      ) 
;
   ]],
   definition = [[
#include "_${fn}.h"

int
${fn}(  
      const ${in_ctype} * restrict in,  
      uint64_t n,  
      int shift,
      ${out_ctype} * restrict out1,
      ${out_ctype} * restrict out2
      )

{ 
  int status = 0;
  if ( in == NULL ) { go_BYE(-1); }
  if ( out1 == NULL ) { go_BYE(-1); }
  if ( out2 == NULL ) { go_BYE(-1); }
  uint64_t imask = ((uint64_t)1 << shift) - 1;
  ${out_ctype} mask = (${out_ctype}) imask;
// TODO PUT BACK #pragma omp parallel for schedule(static)
  for ( uint64_t i = 0; i < n; i++ ) {  
    ${in_ctype} inv1 = in[i]; 
    out1[i] = inv1 >> shift;
    out2[i] = inv1 & mask;
  } 
BYE:
  return status;
}
   ]]
}
