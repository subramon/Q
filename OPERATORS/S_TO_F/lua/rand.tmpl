return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include "_rdtsc.h"

// Below structure needs to be same as structure template in rand_mem_initialize.lua
typedef struct _rand_${out_qtype}_rec_type {
  uint64_t seed;
  struct drand48_data buffer;
  ${out_ctype} lb;
  ${out_ctype} ub;
} RAND_${out_qtype}_REC_TYPE;

extern int
rand_${out_qtype}(
  ${out_ctype} *X,
  uint64_t nX,
  RAND_${out_qtype}_REC_TYPE *ptr_rand_info,
  uint64_t idx
  );
   ]],

   definition = [[

#include "_rand_${out_qtype}.h"

${identity_fn} 

//START_FUNC_DECL
int
rand_${out_qtype}(
  ${out_ctype} *X,
  uint64_t nX,
  RAND_${out_qtype}_REC_TYPE *ptr_rand_info,
  uint64_t idx
  )
//STOP_FUNC_DECL
{
  int status = 0;

  uint64_t seed      = ptr_rand_info->seed;
  register double lb = ptr_rand_info->lb;
  double ub          = ptr_rand_info->ub;
  if ( ub <= lb ) { go_BYE(-1); }
  if ( nX == 0 ) { go_BYE(-1); }
  if ( X == NULL ) { go_BYE(-1); }
  if ( idx == 0 ) { //seed has not yet been set
    if ( seed <= 0 ) {
     seed = RDTSC();
    }
    srand48_r(seed, &(ptr_rand_info->buffer));
  }
  register double range = ub - lb;
// TODO P2: Consider parallelizing this loop
  for ( uint64_t i = 0; i < nX; i++ ) { 
    double x;
    drand48_r(&(ptr_rand_info->buffer), &x);
    X[i] = (${out_ctype}) ${conv_fn} ((lb + (x * range)));
  }
BYE:
  return status;
}

   ]]
}
