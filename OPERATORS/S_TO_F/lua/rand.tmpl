return require 'Q/UTILS/lua/code_gen' {

   declaration = [[
#include "q_incs.h"
#include "rand_struct.h"
extern int
rand_${out_qtype}(
  ${out_ctype} *X,
  uint64_t nX,
  ${args_ctype} *ptr_args,
  uint64_t idx
  );
   ]],
   definition = [[
#include "_rand_${out_qtype}.h"

//START_FUNC_DECL
int
rand_${out_qtype}(
  ${out_ctype} *X,
  uint64_t nX,
  ${args_ctype} *ptr_args,
  uint64_t idx
  )
//STOP_FUNC_DECL
{
  int status = 0;

  uint64_t seed      = ptr_args->seed;
  register double lb = ptr_args->lb;
           double ub = ptr_args->ub;
  if ( ub <= lb ) { go_BYE(-1); }
  if ( nX == 0 ) { go_BYE(-1); }
  if ( X == NULL ) { go_BYE(-1); }
  if ( idx == 0 ) { //seed has not yet been set
    srand48_r(seed, &(ptr_args->buffer));
  }
  register double range = ub - lb;
#pragma omp parallel for schedule(static, 4096)
  for ( uint64_t i = 0; i < nX; i++ ) { 
    X[i] = lb;
  }
  for ( uint64_t i = 0; i < nX; i++ ) { 
    double x;
    drand48_r(&(ptr_args->buffer), &x);
    x *= range;
    X[i] += x;
  }
BYE:
  return status;
}
   ]]
}
