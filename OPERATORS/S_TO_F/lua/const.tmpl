return require 'Q/UTILS/lua/code_gen' {
   declaration = [[
#include "q_incs.h"
#include "const_struct.h"
extern int
const_${out_qtype}(
  ${out_ctype} * const restrict X,
  uint64_t nX,
  ${args_ctype} *ptr_arg,
  uint64_t lb // not used but for consistency with others
  );
]],
definition = [[
#include "_const_${out_qtype}.h"
int
const_${out_qtype}(
  ${out_ctype} * const restrict X,
  uint64_t nX,
  ${args_ctype} *ptr_arg,
  uint64_t lb // not used but for consistency with others
  )
{
  int status = 0;
  if ( X       == NULL ) { go_BYE(-1); }
  if ( nX      == 0    ) { go_BYE(-1); }
  if ( ptr_arg == NULL ) { go_BYE(-1); }
  ${out_ctype} val = ptr_arg->val;
#pragma omp parallel for schedule(static, 4096)
  for ( uint64_t i = 0; i < nX; i++ ) { 
   // __builtin_prefetch(X+i+1024, 1, 1);
    X[i] = val;
  }
BYE:
  return status;
}
]]
}
