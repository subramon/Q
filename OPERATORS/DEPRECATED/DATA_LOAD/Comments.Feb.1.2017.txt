1) Do not create abstractions when not they add minimal value
Example is createFile. Just use fopen()

2) Why can't you invoke fopen from lua directly using ffi?

3) Naming conventions. No camel casing. Go with underscore.

4) Move tests (like README_*sh to test/ folder)

5) Try and get .o and .so files into obj/ folder

I expected the load_csv function to look something like the following

(a) perform all validations of meta data 
(b) set up anything you will need later, file pointers, nn file pointers,
dictionaries, ...
(c) loop through all cells as follows
col_idx = 0;
row_idx = 0;
num_nulls[] = 0; // array of size num_cols
-- num_cols set in Step (a)
for ( ; ; ) { 
  s = get_cell(...) -- gets next cell value
  if ( ~s ) { -- eof 
    assert( col_idx == 0 ) 
    break; 
  }
  -- deal with null values if any
  if ( s == "" ) then 
    if ( ~has_nulls[col_idx] then
      error
    else
      write null byte to nn_file
      write sizeof(..) null bytes to file 
      num_nulls[col_idx]++;
    endif
  else
    -- I would prefer NOT to see a switch statement. This is for exposition
    switch ( depending on type of this column ) { 
      case I1 : ... break; 
      case I4 : int status = C.ffi.txt_to_I4(s, &space); break;
      default : go_BYE(-1); break;
    }
    assert(status == 0)
    int nw = C.ffi.fwrite(space, sizeof(..), 1, fp);
    assert(nw, sizeof(..))
    if ( has_nulls[col_idx] ) then
      write byte with value 1 to nn_file
    endif
  endif
  if ( col_idx == ( num_cols - 1 ) {
    col_idx = 0;
    row_idx++;
  }
}
assert(row_idx > 0, "table must have at least one row") 
assert(col_idx == 0, "all rows have same number of columns")
for ( int col_idx = 0; col_idx < num_cols; col_idx++ ) {
  if ( ( has_nulls[col_idx] ) && ( num_nulls[col_idx] == 0 ) ) { 
    delete nn file
  }
}



int
Foo(
  bool bar,
  int x
  )
{
  int abc;
  if ( hello ) { 
    something
    if ( ... ) { // second is regular way of doing stuff
      go_BYE(-1);
    }
    some more
  }
  else {
    just one line
  }
  return y;
}
