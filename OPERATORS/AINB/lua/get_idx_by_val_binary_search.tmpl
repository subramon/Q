return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include <stdint.h>
#include <stdbool.h>
#include <stdlib.h>
//START_FOR_CDEF
extern int
${fn}(  
      const ${in_ctype} * restrict a,   // [nA]
      uint32_t nA,
      const ${in_ctype} * restrict b,  // [nB]
      uint32_t nB,
      ${out_ctype} *c, // [nA] 
      bool * restrict nn_c
      );
//STOP_FOR_CDEF
   ]],
   definition = [[

#include "${fn}.h"

int
${fn}(  
      const ${in_ctype} * restrict a,   // [nA]
      uint32_t nA,
      const ${in_ctype} * restrict b,  // [nB]
      uint32_t nB,
      ${out_ctype} *c, // [nA] 
      bool * restrict nn_c
      )
{
  int status = 0;

// #pragma omp parallel for schedule(static, ${omp_chunk_size})
  for ( uint32_t i = 0; i < nA; i++ ) {
    c[i] = 0;
    if ( nn_c != NULL ) { nn_c[i] = false; }
    // START Binary search
    int64_t prev_pos = -1;
    uint32_t lb = 0; 
    uint32_t ub = nB;
    ${in_ctype} key = a[i];
    for ( ; ; ) { // break inside loop 
      int64_t pos = (lb+ub)/2;
      if ( pos >= nB ) { pos = nB; } 
      ${in_ctype} cmp = b[pos];
      if ( key == cmp ) { 
        c[i] = pos;
        if ( nn_c != NULL ) { nn_c[i] = true; } 
        break;
      }
      if ( prev_pos == pos ) { break; } 
      prev_pos = pos;
      if ( key < cmp ) { // reduce ub 
        ub = pos;
      }
      else { // increase lb 
        lb = pos;
      }
    }
    // STOP  Binary search
  }
BYE:
  return status;
}
   ]]
}
