return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include "_bin_search_${val_qtype}.h"
extern int
${fn}(  
      const ${val_ctype} * restrict a,  
      uint64_t nA,
      const ${val_ctype} * restrict b,  
      uint32_t nB,
      ${idx_ctype} *C // [nA] 
      );
   ]],
   definition = [[

#include "_${fn}.h"

int
${fn}(  
      const ${val_ctype} * restrict A,  
      uint64_t nA,
      const ${val_ctype} * restrict B,  
      uint32_t nB,
      ${idx_ctype} *C // [nA] 
      )
{
  int status = 0;

#pragma omp parallel for schedule(static, 256)
  for ( uint64_t i = 0; i < nA; i++ ) { 
    int64_t l_pos;
    if ( status == -1 ) { continue; }
    int l_status = 
      bin_search_${val_qtype}(B, nB, ((${val_ctype})(A[i])), NULL, &l_pos);
    if ( ( l_status < 0 ) && ( status == 0 ) ) { status = -1; continue; }
    if ( l_pos >= 0 )  {
      if ( (uint64_t)l_pos >= nB ) {  
        /* should never happen. Being Extra cautious */
        C[i] = -1; status = -1; continue; 
      }
      else {
        C[i] = l_pos;
      }
    }
    else {
      C[i] = -1;
    }
  }
  if ( status < 0 ) { go_BYE(-1); }
BYE:
  return status;
}
   ]]
}
