return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include "_set_bit_u64.h"
extern int
${fn}(  
      const ${a_ctype} * restrict a,  
      uint64_t nA,
      const ${b_ctype} * restrict b,  
      uint16_t nB,
      uint64_t *C // output  nA bytes
      );
   ]],
   definition = [[

#include "_${fn}.h"

int
${fn}(  
      const ${a_ctype} * restrict A,  
      uint64_t nA,
      const ${b_ctype} * restrict B,  
      uint16_t nB,
      uint64_t *C // nA bytes
      )
{
  int status = 0;
  if ( nB >= 32 ) { go_BYE(-1); }

  uint8_t *lC = (uint8_t *)C;
#pragma omp parallel for schedule(static, 256)
  for ( uint64_t i = 0; i < nA; i++ ) { 
    lC[i] = 0; 
  }
#pragma omp parallel for schedule(static, 256)
  for ( uint64_t i = 0; i < nA; i++ ) { 
    uint16_t rslt = 0;
    for ( uint16_t j = 0; j < nB; j++ ) { 
      rslt += (A[i] == B[j]);
    }
    if ( rslt > 0 ) {
      set_bit_u64(C, i, 1);
   }
  }
BYE:
  return status;
}
   ]]
}
