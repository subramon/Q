return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
//START_FOR_CDEF
extern int
${fn}(  
      const ${val_ctype} * const restrict val_fld,  /* [nR_in] */
      uint64_t nR_in,
      const ${grp_ctype} * const restrict grp_fld,  /* [nR_in] */
      const bool         * const restrict cnd_fld,  /* [nR_in] */

      ${out_val_ctype} * restrict out_val_fld, /* [nR_out] */
      uint64_t         * restrict out_cnt_fld, /* [nR_out] */
      uint32_t nR_out
      ) 
;
//STOP_FOR_CDEF
   ]],
   definition = [[

#include "${fn}.h"

int
${fn}(  
      const ${val_ctype} * const restrict val_fld,  /* [nR_in] */
      uint64_t nR_in,
      const ${grp_ctype} * const restrict grp_fld,  /* [nR_in] */
      const bool         * const restrict cnd_fld,  /* [nR_in] */

      ${out_val_ctype} * restrict out_val_fld, /* [nR_out] */
      uint64_t         * restrict out_cnt_fld, /* [nR_out] */
      uint32_t nR_out
      )

{ 
  int status = 0;
  ${out_val_ctype} **vals = NULL;
  uint64_t         **cnts = NULL;

  if ( nR_in == 0 ) { go_BYE(-1); } 
  if ( nR_out == 0 ) { go_BYE(-1); } 

  int nT1 = nR_in / ( 16 * nR_out ); 
  int nT2 = sysconf(_SC_NPROCESSORS_ONLN);
  int nT = mcr_min(nT1, nT2); 
  nT = mcr_max(1, nT);
  int block_size = nR_in / nT;
  // printf("NUMBY using %d cores \n", nT);

  if ( nT == 1 ) { 
    for ( uint64_t i = 0; i < nR_in; i++ ) {
      if ( ( cnd_fld != NULL ) && ( cnd_fld[i] == false ) ) { continue; }
      ${grp_ctype} g = grp_fld[i];
      ${checking_code}
      out_cnt_fld[g]++;
      ${operating_code} // for sumby: out_val_fld[g] += val_fld[i];
    }
  }
  else {
    // START Allocate thread-local space for val/cnt
    vals = malloc(nT * sizeof(${out_val_ctype} *));
    return_if_malloc_failed(vals);
    memset(vals, 0, nT * sizeof(${out_val_ctype} *));

    cnts = malloc(nT * sizeof(uint64_t *));
    return_if_malloc_failed(cnts);
    memset(cnts, 0, nT * sizeof(uint64_t *));
    // START Allocate thread-local space for val/cnt
    // START Initialize thread-local space for val/cnt
    for ( int t = 0; t < nT; t++ ) { 
      vals[t] = malloc(nR_out * sizeof(${out_val_ctype}));
      return_if_malloc_failed(vals[t]);
      memset(vals[t], 0, nR_out * sizeof(${out_val_ctype}));

      cnts[t] = malloc(nR_out * sizeof(uint64_t));
      return_if_malloc_failed(cnts[t]);
      memset(cnts[t], 0, nR_out * sizeof(uint64_t));
    }
    // STOP  Initialize thread-local space for val/cnt
// TODO #pragma omp parallel for schedule(static)
    for ( int t = 0; t < nT; t++ ) { 
      int32_t lb = t  * block_size;
      int32_t ub = lb + block_size;
      if ( t == 0  ) { lb = 0; }
      if ( t == nT-1  ) { ub = nR_in; }
      for ( int i = lb; i < ub; i++ ) { 
        if ( ( cnd_fld != NULL ) && ( cnd_fld[i] == false ) ) { continue; }
        ${grp_ctype} g = grp_fld[i];
        ${checking_code}
        cnts[t][g]++;
        ${operating_code} 
        // e.g., for sumby: out_val_fld[g] += val_fld[i];
      }
    }
    // START Merge thread local space
    for ( int t = 0; t < nT; t++ ) { 
      for ( uint32_t g = 0; g  < nR_out; g++  ) { 
        out_cnt_fld[g] += cnts[t][g];
        ${merging_code}
        // e.g., for sumby: out_val_fld[j] += vals[t][g];
      }
    }
    // STOP  Merge thread local space
  }
BYE:
  // START Free thread local space 
  if ( vals != NULL ) { 
    for ( int t = 0; t < nT; t++ ) {
      free_if_non_null(vals[t]);
    }
    free_if_non_null(vals);
  }
  if ( cnts != NULL ) { 
    for ( int t = 0; t < nT; t++ ) {
      free_if_non_null(cnts[t]);
    }
    free_if_non_null(cnts);
  }
  // STOP  Free thread local space 
  return status;
}
]]
}
