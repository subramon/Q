return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
//START_FOR_CDEF
extern int
${fn}(  
      const ${val_ctype} * const restrict val_fld,  /* [nR_in] */
      uint64_t nR_in,
      const ${grp_ctype} * const restrict grp_fld,  /* [nR_in] */
      const bool         * const restrict cnd_fld,  /* [nR_in] */

      ${out_val_ctype} * restrict out_val_fld, /* [nR_out] */
      uint64_t         * restrict out_cnt_fld, /* [nR_out] */
      uint32_t nR_out
      ) 
;
//STOP_FOR_CDEF
   ]],
   definition = [[

#include "${fn}.h"

int
${fn}(  
      const ${val_ctype} * const restrict val_fld,  /* [nR_in] */
      uint64_t nR_in,
      const ${grp_ctype} * const restrict grp_fld,  /* [nR_in] */
      const bool         * const restrict cnd_fld,  /* [nR_in] */

      ${out_val_ctype} * restrict out_val_fld, /* [nR_out] */
      uint64_t         * restrict out_cnt_fld, /* [nR_out] */
      uint32_t nR_out
      )

{ 
  int status = 0;

  if ( nR_in == 0 ) { WHEREAMI; return -1; }
  if ( nR_out == 0 ) { WHEREAMI; return -1; }
  for ( uint64_t i = 0; i < nR_in; i++ ) {
    if ( ( cnd_fld != NULL ) && ( cnd_fld[i] == false ) ) { continue; }
    ${grp_ctype} x = grp_fld[i];
    ${checking_code}
    out_cnt_fld[x]++;
    ${operating_code} // for sumby: out_val_fld[x] += val_fld[i];
  }
${bye}
  return status;
}
]]
}
