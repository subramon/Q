return require 'Q/UTILS/lua/code_gen' {

   declaration = [[
#include "q_incs.h"
//START_FOR_CDEF
extern int
${fn}(  
      const ${val_ctype} * restrict inval, // [inval_len]
      uint64_t inval_len,
      const ${idx_ctype} * restrict idx, // [idx_len]
      uint32_t idx_len,
      ${out_ctype} * restrict outval,  // [idx_len]
      bool * restrict nn_outval  // [idx_len]
      ) 
;
//STOP_FOR_CDEF
   ]],
   definition = [[
#include "${fn}.h"

int
${fn}(  
      const ${val_ctype} * restrict inval, // [inval_len]
      uint64_t inval_len,
      const ${idx_ctype} * restrict idx, // [idx_len]
      uint32_t idx_len,
      ${out_ctype} * restrict outval,  // [idx_len]
      bool * restrict nn_outval  // [idx_len]
      )
{ 
  int status = 0;
  if ( inval == NULL ) { go_BYE(-1); }
  if ( idx == NULL ) { go_BYE(-1); }
  if ( outval == NULL ) { go_BYE(-1); }
  if ( inval_len == 0 ) { go_BYE(-1); }
  if ( idx_len == 0 ) { go_BYE(-1); }

// #pragma omp parallel for schedule(static, ${omp_chunk_size})
  for ( uint32_t i = 0; i < idx_len; i++ ) {  
    ${idx_ctype} l_idx = idx[i];
    outval[i] = 0;
    if ( nn_outval ) { nn_outval[i] = false; } 
    if ( ( l_idx < 0 ) || ( (uint32_t)l_idx >= inval_len ) ) {  continue; }

    outval[i] = inval[l_idx];
    if ( nn_outval ) { nn_outval[i] = true; } 
  }
BYE:
  return status;
}
   ]]
}
