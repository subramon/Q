return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
extern int
${fn}(  
      const uint64_t   * restrict in1,  
      const uint64_t   * restrict in2,  
      uint64_t nR,  
      uint64_t  * restrict out 
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

static void
__operation(
      uint64_t   a,
      uint64_t   b, 
      uint64_t  *ptr_c
      )
      {
      uint64_t c;
      ${c_code_for_operator}
      *ptr_c = c;
      }

int
${fn}(  
      const uint64_t * restrict in1,  
      const uint64_t * restrict in2,  
      uint64_t nR,  
      uint64_t * restrict out 
      )

{ 
  int status = 0;
  uint64_t num_longs = nR/64;
  if ( ( num_longs * 64 ) != nR ) { num_longs++; }
#pragma omp parallel for schedule(static)
  for ( uint64_t i = 0; i < num_longs; i++ ) {  
    uint64_t inv1 = in1[i]; 
    uint64_t inv2 = in2[i]; 
    uint64_t outv; 
    __operation(inv1, inv2, &outv);
    out[i] = outv;
  } 
  return status;
}

   ]]
}
