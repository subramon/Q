return require 'Q/UTILS/lua/code_gen' {
   declaration = [[
#include <math.h>
#include <omp.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
//START_FOR_CDEF
extern int
${fn}(  
      ${f1_ctype} * const restrict in1,  
      ${f2_ctype} * const restrict in2,  
      uint32_t nR,  
      void *dummy,
      ${f3_ctype} * restrict out 
      ) 
;
//STOP_FOR_CDEF
   ]],
   definition = [[

#include "${fn}.h"
#include "${fn_ispc}.h"

int
${fn}(  
      ${f1_ctype} * const restrict in1,  
      ${f2_ctype} * const restrict in2,  
      uint32_t nR,  
      void *dummy,
      ${f3_ctype} * restrict out 
      )

{ 
  int status = 0;
  uint32_t nT = omp_get_num_threads(); // number of cores
  uint32_t block_size = 4096; // block size
  uint32_t nB = nR / block_size;  // nR in terms of blocks
  uint32_t nB_per_core = round(nB / nT);
#pragma omp parallel for schedule(static)
  for ( uint32_t i = 0; i < nT; i++ ) {  
    uint32_t lb = i * nB_per_core;
    uint32_t ub = lb + nB_per_core;
    if ( ub > nB ) { ub = nB; }
    uint32_t off = lb * block_size;
    uint32_t n_for_me = (ub-lb)*block_size;
    ${fn_ispc}(in1+off, in2+off, (${f3_for_ispctype} *)out+off, n_for_me);
  }

  // handle the balance 
  for ( uint32_t i = (nR/block_size)*block_size; i < nR; i++ ) {  
    ${f1_ctype} a = in1[i]; 
    ${f2_ctype} b = in2[i]; 
    ${f3_ctype} c;
    ${code}
    out[i] = c;
  } 

  return status;
}

   

   ]]
}
