return require 'Q/UTILS/lua/code_gen' {
   declaration = [[
#include <math.h>
#include <omp.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
//START_FOR_CDEF
extern int
${fn}(  
      ${f1_ctype} * const restrict in1,  
      const bool * restrict nn_in1,
      ${f2_ctype} * const restrict in2,  
      const bool * restrict nn_in2,
      uint32_t nR,  
      void *dummy,
      ${f3_ctype} * restrict out,
      bool * restrict nn_out
      ) 
;
//STOP_FOR_CDEF
   ]],
   definition = [[

#include "${fn}.h"
${comment_ispc} #include "${fn_ispc}.h"

int
${fn}(  
      ${f1_ctype} * const restrict in1,  
      const bool * restrict nn_in1,
      ${f2_ctype} * const restrict in2,  
      const bool * restrict nn_in2,
      uint32_t nR,  
      void *dummy,
      ${f3_ctype} * restrict out,
      bool * restrict nn_out
      )

{ 
  int status = 0;
#pragma omp parallel for schedule(static, ${chunk_size})
  for ( uint32_t i = 0; i < nR; i++ ) {  
    ${f1_ctype} a = in1[i]; 
    ${f2_ctype} b = in2[i]; 
    ${f3_ctype} c = 0;
    bool in1_null = true;
    if ( ( nn_in1 == NULL ) || ( nn_in1[i] == true ) ) { in1_null = false; }
    bool in2_null = true;
    if ( ( nn_in2 == NULL ) || ( nn_in2[i] == true ) ) { in2_null = false; }
    bool out_null = false;
    if ( ( in1_null ) || ( in2_null ) ) { out_null = true; }
    if ( out_null ) { 
      nn_out[i] = false;
    }
    else {
      ${code}
      nn_out[i] = true;
    }
    out[i] = c;
  } 

  return status;
}

   

   ]]
}
