return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include "_set_bit_u64.h"

${includes}
extern int
${fn}(  
      const ${in1_ctype} * restrict in1,  
      const ${in2_ctype} * restrict in2,  
      uint64_t nR,  
      uint64_t *restrict out 
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

int
${fn}(  
      const ${in1_ctype} * restrict in1,  
      const ${in2_ctype} * restrict in2,  
      uint64_t nR,  
      uint64_t * restrict out 
      )

{ 
/*
Each of the operators 
< (less than), 
> (greater than), 
<= (less than or equal to), 
>= (greater than or equal to) 
shall yield 1 if the specified relation is true and 0 if it is false. 
The result has type int.

The == (equal to) and != (not equal to) operators are analogous to the
relational operators except for their lower precedence
*/

#define VECTOR_LENGTH 4096
  int status = 0;
  /* calculate number of VECTOR_LENGTH element sized chunks to process */
  uint64_t num_blocks = nR / VECTOR_LENGTH; 
  int num_last_block = VECTOR_LENGTH;
  if ( ( num_blocks * VECTOR_LENGTH ) != nR ) { 
    num_last_block = nR - ( num_blocks * VECTOR_LENGTH);
    num_blocks++; 
  }
#pragma omp parallel for schedule(static)
  for ( uint64_t blk_idx = 0; blk_idx < num_blocks; blk_idx++ ) {  
    uint64_t lb = blk_idx * VECTOR_LENGTH;;
    uint64_t ub = lb + VECTOR_LENGTH;;
    if ( blk_idx == (num_blocks-1) ) { ub = lb + num_last_block; }
    int bit_idx = 0;
    uint64_t out_idx = lb / 64;
    uint64_t oval = 0;
    for ( uint64_t iidx = lb; iidx < ub; iidx++ ) {
      ${in1_ctype} inv1 = in1[iidx]; 
      ${in2_ctype} inv2 = in2[iidx]; 
      int rslt = (inv1 ${comparator} inv2);
      /* TODO: Avoid the if condition */
      if ( rslt == 1 ) { set_bit_u64(&oval, bit_idx, 1); }
      bit_idx++;
      if ( bit_idx == 64 ) {
        bit_idx = 0;
        out[out_idx] = oval;
        out_idx++;
        oval = 0;
      }
    }
    if ( bit_idx != 0 ) { 
      out[out_idx] = oval;
    }
  }
  return status;
}

   ]]
}
