return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
${includes}
extern int
${fn}(  
      const ${in1_ctype} * restrict in1,  
      const ${in2_ctype} * restrict in2,  
      uint64_t nR,  
      ${out_ctype} * restrict out 
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

static void
__operation(
      ${in1_ctype} a,
      ${in2_ctype} b, 
      ${out_ctype} *ptr_c
      )
      {
      ${out_ctype} c;
      ${c_code_for_operator}
      *ptr_c = c;
      }

int
${fn}(  
      const ${in1_ctype} * restrict in1,  
      const ${in2_ctype} * restrict in2,  
      uint64_t nR,  
      ${out_ctype} * restrict out 
      )

{ 
  int status = 0;
#pragma omp parallel for schedule(static)
  for ( uint64_t i = 0; i < nR; i++ ) {  
    ${in1_ctype} inv1 = in1[i]; 
    ${in2_ctype} inv2 = in2[i]; 
    ${out_ctype} outv;
    __operation(inv1, inv2, &outv);
    out[i] = outv;
  } 

  return status;
}

   ]]
}
