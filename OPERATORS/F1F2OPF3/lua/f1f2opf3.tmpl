return require 'Q/UTILS/lua/code_gen' {
   declaration = [[
#include <math.h>
#include <omp.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
//START_FOR_CDEF
extern int
${fn}(  
      ${f1_ctype} * const restrict in1,  
      ${f2_ctype} * const restrict in2,  
      uint32_t nR,  
      void *dummy,
      ${f3_ctype} * restrict out 
      ) 
;
//STOP_FOR_CDEF
   ]],
   definition = [[

#include "${fn}.h"

int
${fn}(  
      ${f1_ctype} * const restrict in1,  
      ${f2_ctype} * const restrict in2,  
      uint32_t nR,  
      void *dummy,
      ${f3_ctype} * restrict out 
      )

{
  int status = 0;
  // uint32_t nT = sysconf(_SC_NPROCESSORS_ONLN);
  uint32_t nT = omp_get_num_threads(); 
  uint32_t block_size = nR / nT;
#pragma omp parallel for schedule(static)
  for ( uint32_t t = 0; t < nT; t++ ) { 
    uint32_t lb = t * block_size;
    uint32_t ub = lb + block_size;
    if ( t == 0               ) { lb = 0;  }
    if ( t == (nT-1) ) { ub = nR; }
    for ( uint32_t i  = lb; i < ub; i++ ) {  
      ${f1_ctype} a = in1[i]; 
      ${f2_ctype} b = in2[i]; 
      ${f3_ctype} c;
      ${code}
      out[i] = c;
    }
  }
  return status;
}
   ]]
}
