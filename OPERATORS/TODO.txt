Fix ffi.cast get_ptr issue
AINB/lua/get_idx_by_val.lua:  local ptr2 = ffi.cast(f2_cast_as,  get_ptr(f2_ptr))
AINB/lua/get_idx_by_val.lua:      local chunk1 = ffi.cast(f1_cast_as,  get_ptr(f1_chunk))
AINB/lua/get_idx_by_val.lua:      local chunk3 = ffi.cast(f3_cast_as,  get_ptr(f3_buf))
AINB/lua/expander_ainb.lua:    local casted_aptr = ffi.cast( qconsts.qtypes[subs.a_qtype].ctype .. "*", get_ptr(aptr))
AINB/lua/expander_ainb.lua:    local casted_bptr = ffi.cast( qconsts.qtypes[subs.b_qtype].ctype .. "*", get_ptr(bptr))
AINB/lua/expander_ainb.lua:    local casted_cbuf = ffi.cast( qconsts.qtypes['B1'].ctype .. "*", get_ptr(cbuf))
AX_EQUALS_B/lua/do_solver.lua:  local copy_xptr = ffi.cast(b_ctype .. " *", get_ptr(xptr))
AX_EQUALS_B/lua/do_solver.lua:    Aptr[i-1] = ffi.cast(qconsts.qtypes[b_qtype].ctype .. "*",get_ptr(Ai_chunk))
AX_EQUALS_B/lua/do_solver.lua:  local casted_bptr = ffi.cast(qconsts.qtypes[b_qtype].ctype .. "*", get_ptr(bptr))
AX_EQUALS_B/test/test_solver.lua:  b_new_chunk = ffi.cast("double*", get_ptr(b_new_chunk))
CAT/tests/test_cat.lua:  local x_buf_copy = ffi.cast(qconsts.qtypes.I4.ctype .. " *", get_ptr(x_buf))
CAT/tests/test_cat.lua:  local y_buf_copy = ffi.cast(qconsts.qtypes.I4.ctype .. " *", get_ptr(y_buf))
CAT/tests/test_cat.lua:  local nn_buf_copy = ffi.cast("int8_t *", get_ptr(nn_buf))
COUNT/lua/expander_counts.lua:      local casted_x_chunk = ffi.cast( subs.ctype .. "*",  get_ptr(x_chunk))
COUNT/lua/counts_specialize.lua:      count = ffi.cast('uint64_t *' , get_ptr(count))
DROP_NULLS/lua/drop_nulls.lua:  local casted_xptr = ffi.cast(qconsts.qtypes[x:fldtype()].ctype .. "*", get_ptr(xptr))
DROP_NULLS/lua/drop_nulls.lua:  local casted_nn_xptr = ffi.cast(qconsts.qtypes['B1'].ctype .. "*", get_ptr(nn_xptr))
DROP_NULLS/lua/drop_nulls.lua:  local casted_sval = ffi.cast(qconsts.qtypes[x:fldtype()].ctype .. "*", get_ptr(sval:to_cmem()))
DROP_NULLS/test/test_drop_nulls_lazy_eval.lua:  local iptr = ffi.cast(qconsts.qtypes[x_qtype].ctype .. " *", get_ptr(base_data))
DROP_NULLS/test/test_drop_nulls_lazy_eval.lua:  local nn_iptr = ffi.cast(qconsts.qtypes[qtype].ctype .. " *", get_ptr(nn_data))
F1OPF2F3/lua/expander_f1opf2f3.lua:      local cst_in_chunk = ffi.cast(in_cast_as,  get_ptr(in_chunk))
F1OPF2F3/lua/expander_f1opf2f3.lua:        cbufs[i] = ffi.cast(out_cast_as, get_ptr(bufs[i]))
F1S1OPF2/lua/cum_cnt_specialize.lua:  local args_ptr = ffi.cast(args_ctype .. " *", get_ptr(args))
F1S1OPF2/lua/is_prev.lua:      local cst_f1_chunk = ffi.cast(f1_cast_as, get_ptr(f1_chunk))
F1S1OPF2/lua/is_prev.lua:      local cst_f2_buf   = ffi.cast(f2_cast_as, get_ptr(f2_buf))
F1S1OPF2/lua/is_prev.lua:      local casted_last_val = ffi.cast(qconsts.qtypes[subs.qtype].ctype .. "*", get_ptr(last_val))
F1S1OPF2/lua/expander_f1s1opf2.lua:      local cst_f1_chunk    = ffi.cast(cst_f1_as, get_ptr(f1_chunk))
F1S1OPF2/lua/expander_f1s1opf2.lua:      local cst_nn_f1_chunk = ffi.cast(cst_as_B1, get_ptr(nn_f1_chunk))
F1S1OPF2/lua/expander_f1s1opf2.lua:        cst_ptr_args    = ffi.cast(cst_args_as, get_ptr(subs.args))
F1S1OPF2/lua/expander_f1s1opf2.lua:      local cst_f2_buf      = ffi.cast(cst_f2_as, get_ptr(f2_buf))
F1S1OPF2/lua/expander_f1s1opf2.lua:      local cst_nn_f2_buf   = ffi.cast(cst_as_B1, get_ptr(nn_f2_buf))
F1S1OPF2_VAL/lua/expander_f1s1opf2_val.lua:      a_idx = ffi.cast("uint64_t *", get_ptr(cmem_a_idx))
F1S1OPF2_VAL/lua/expander_f1s1opf2_val.lua:      out_idx = ffi.cast("uint64_t *", get_ptr(cmem_out_idx))
F1S1OPF2_VAL/lua/expander_f1s1opf2_val.lua:      local cst_a_chunk = ffi.cast(cst_a_as, get_ptr(a_chunk))
F1S1OPF2_VAL/lua/expander_f1s1opf2_val.lua:      local cst_s_val = ffi.cast(cst_s_as, get_ptr(s_cmem))
F1S1OPF2_VAL/lua/expander_f1s1opf2_val.lua:      local cst_out_buf = ffi.cast(cst_out_as, get_ptr(out_buf))
F1S1OPF2_VAL/lua/expander_f1s1opf2_val.lua:      local cst_idx_buf = ffi.cast(cst_idx_buf_as, get_ptr(idx_buf))
GET/lua/set_sclr_val_by_idx.lua:  local ptr_sclr_val = ffi.cast(f2_cast_as,  get_ptr(sclr_val:to_cmem()))
GET/lua/set_sclr_val_by_idx.lua:  local ptr2 = ffi.cast(f2_cast_as,  get_ptr(f2_ptr))
GET/lua/set_sclr_val_by_idx.lua:    local chunk1 = ffi.cast(f1_cast_as,  get_ptr(f1_chunk))
GET/lua/add_vec_val_by_idx.lua:  local cst_dst_ptr = ffi.cast(dst_cast_as,  get_ptr(dst_ptr))
GET/lua/add_vec_val_by_idx.lua:    local src_chunk = ffi.cast(src_cast_as,  get_ptr(src_chunk))
GET/lua/add_vec_val_by_idx.lua:    local idx_chunk = ffi.cast(idx_cast_as,  get_ptr(idx_chunk))
GET/lua/get_val_by_idx.lua:  local ptr_null_val = ffi.cast(f2_cast_as,  get_ptr(null_val:to_cmem()))
GET/lua/get_val_by_idx.lua:    local ptr2 = ffi.cast(f2_cast_as,  get_ptr(f2_ptr))
GET/lua/get_val_by_idx.lua:      local chunk1 = ffi.cast(f1_cast_as,  get_ptr(f1_chunk))
GET/lua/get_val_by_idx.lua:      local chunk3 = ffi.cast(f3_cast_as,  get_ptr(f3_buf))
GETK/lua/maxk_mem_initialize_reducer.lua:  local c_mem_ptr = ffi.cast(cst_as, get_ptr(c_mem))
GETK/lua/maxk_mem_initialize_reducer.lua:  c_mem_ptr.val = ffi.cast(subs.v_ctype .. "*", get_ptr(val_cmem))
GETK/lua/maxk_mem_initialize_reducer.lua:  c_mem_ptr.drag = ffi.cast(subs.d_ctype .. "*", get_ptr(drag_cmem))
GETK/lua/maxk_mem_initialize_reducer.lua:    local y = ffi.cast(cst_as, get_ptr(c_mem))
GETK/lua/expander_getk_reducer.lua:      local cst_val_chunk = ffi.cast(v_ctype .. "*",  get_ptr(val_chunk))
GETK/lua/expander_getk_reducer.lua:      local cst_drag_chunk = ffi.cast(d_ctype .. "*",  get_ptr(drag_chunk))
GETK/lua/expander_getk_reducer.lua:      local cst_reduce_struct = ffi.cast(cst_as, get_ptr(reduce_struct))
GETK/lua/getk_mem_initialize_reducer.tmpl:  local c_mem_ptr = ffi.cast(cst_as, get_ptr(c_mem))
GETK/lua/getk_mem_initialize_reducer.tmpl:  c_mem_ptr.val = ffi.cast(subs.v_ctype .. "*", get_ptr(val_cmem))
GETK/lua/getk_mem_initialize_reducer.tmpl:  c_mem_ptr.drag = ffi.cast(subs.d_ctype .. "*", get_ptr(drag_cmem))
GETK/lua/getk_mem_initialize_reducer.tmpl:    local y = ffi.cast(cst_as, get_ptr(c_mem))
GETK/lua/expander_getk2.lua:    local fval_chunk = ffi.cast(fval_ctype .. "*",  get_ptr(fval_chunk))
GETK/lua/expander_getk2.lua:      local fopt_chunk = ffi.cast(fopt_ctype .. "*",  get_ptr(fopt_chunk))
GETK/lua/expander_getk.lua:      casted_sort_buf_val = ffi.cast(ctype .. "*", get_ptr(sort_buf_val))
GETK/lua/expander_getk.lua:      casted_bufX = ffi.cast(ctype .. "*", get_ptr(bufX))
GETK/lua/expander_getk.lua:      casted_bufZ = ffi.cast(ctype .. "*", get_ptr(bufZ))
GETK/lua/expander_getk.lua:      ptr_num_in_Z = ffi.cast("uint32_t *",  get_ptr(num_in_Z))
GETK/lua/expander_getk.lua:      casted_chunk = ffi.cast(ctype .. "*",  get_ptr(chunk))
GETK/lua/mink_mem_initialize_reducer.lua:  local c_mem_ptr = ffi.cast(cst_as, get_ptr(c_mem))
GETK/lua/mink_mem_initialize_reducer.lua:  c_mem_ptr.val = ffi.cast(subs.v_ctype .. "*", get_ptr(val_cmem))
GETK/lua/mink_mem_initialize_reducer.lua:  c_mem_ptr.drag = ffi.cast(subs.d_ctype .. "*", get_ptr(drag_cmem))
GETK/lua/mink_mem_initialize_reducer.lua:    local y = ffi.cast(cst_as, get_ptr(c_mem))
GROUPBY/lua/expander_maxby_minby.lua:      local casted_a_chunk = ffi.cast(a_ctype .. "*",  get_ptr(a_chunk))
GROUPBY/lua/expander_maxby_minby.lua:      local casted_b_chunk = ffi.cast(b_ctype .. "*",  get_ptr(b_chunk))
GROUPBY/lua/expander_maxby_minby.lua:      local casted_out_buf = ffi.cast(out_ctype .. "*",  get_ptr(out_buf))
GROUPBY/lua/expander_sumby.lua:  local cst_out_buf = ffi.cast( out_ctype .. "*",  get_ptr(out_buf))
GROUPBY/lua/expander_sumby.lua:    local cst_a_chnk = ffi.cast( a_ctype .. "*",  get_ptr(a_chunk))
GROUPBY/lua/expander_sumby.lua:    local cst_b_chnk = ffi.cast( b_ctype .. "*",  get_ptr(b_chunk))
GROUPBY/lua/expander_sumby.lua:      cst_c_chunk = ffi.cast( "uint64_t *",    get_ptr(c_chunk))
GROUPBY/lua/expander_numby.lua:      local casted_a_chunk = ffi.cast(in_ctype .. " *",  get_ptr(a_chunk))
GROUPBY/lua/expander_numby.lua:      local casted_out_buf = ffi.cast(out_ctype .. "*",  get_ptr(out_buf))
HASH/lua/expander_hash.lua:    local cst_f1_chunk  = ffi.cast("char *", get_ptr(f1_chunk))
HASH/lua/expander_hash.lua:    local cst_out_buf   = ffi.cast(cst_out_as, get_ptr(out_buf))
IDX_SORT/lua/idx_sort.lua:  local casted_yptr = ffi.cast( qconsts.qtypes[val:fldtype()].ctype .. "*", get_ptr(yptr))
IFXTHENYELSEZ/lua/ss_ifxthenyelsez.lua:    local casted_xptr = ffi.cast(qconsts.qtypes[x:fldtype()].ctype .. "*", get_ptr(xptr))
IFXTHENYELSEZ/lua/ss_ifxthenyelsez.lua:    local casted_yptr = ffi.cast(qconsts.qtypes[y:fldtype()].ctype .. "*", get_ptr(yptr))
IFXTHENYELSEZ/lua/ss_ifxthenyelsez.lua:    local casted_zptr = ffi.cast(qconsts.qtypes[z:fldtype()].ctype .. "*", get_ptr(zptr))
IFXTHENYELSEZ/lua/ss_ifxthenyelsez.lua:    local casted_wbuf = ffi.cast(qconsts.qtypes[y:fldtype()].ctype .. "*", get_ptr(wbuf))
IFXTHENYELSEZ/lua/expander_ifxthenyelsez.lua:      cst_yptr = ffi.cast(cst_y_as, get_ptr(yptr))
IFXTHENYELSEZ/lua/expander_ifxthenyelsez.lua:      cst_zptr = ffi.cast(cst_z_as, get_ptr(zptr))
IFXTHENYELSEZ/lua/expander_ifxthenyelsez.lua:      cst_yptr = ffi.cast(cst_y_as, get_ptr(yptr))
IFXTHENYELSEZ/lua/expander_ifxthenyelsez.lua:      cst_zptr = ffi.cast(cst_z_as, get_ptr(zptr))
IFXTHENYELSEZ/lua/expander_ifxthenyelsez.lua:    cst_xptr = ffi.cast(cst_x_as, get_ptr(xptr))
IFXTHENYELSEZ/lua/expander_ifxthenyelsez.lua:    cst_wbuf = ffi.cast(cst_w_as, get_ptr(wbuf))    
INDEX/lua/expander_indices.lua:      local casted_a_chunk = ffi.cast( qconsts.qtypes[a:fldtype()].ctype .. "*",  get_ptr(a_chunk))
INDEX/lua/expander_indices.lua:      local casted_out_buf = ffi.cast( qconsts.qtypes["I8"].ctype .. "*",  get_ptr(out_buf))
INDEX/lua/expander_index.lua:      local cst_a_chunk = ffi.cast(ctype .. " *",  get_ptr(a_chunk))
JOIN/lua/expander_join.lua:      local casted_c_buf   = ffi.cast( subs.dst_lnk_ctype .. "*",  get_ptr(c_chunk))
JOIN/lua/expander_join.lua:      local casted_out_buf = ffi.cast( subs.dst_fld_ctype .. "*",  get_ptr(dst_fld))
JOIN/lua/expander_join.lua:      local casted_out_nn_buf = ffi.cast( "uint64_t *",  get_ptr(nn_dst_fld))
JOIN/lua/expander_join.lua:      local casted_a_chunk = ffi.cast( subs.src_lnk_ctype .. "*",  get_ptr(a_chunk))
JOIN/lua/expander_join.lua:      local casted_b_chunk = ffi.cast( subs.src_fld_ctype .. "*",  get_ptr(b_chunk))
MDB/lua/mk_comp_key_val.lua:  local cst_key_buf = assert(ffi.cast(key_cast_as, get_ptr(key_buf)))
MDB/lua/mk_comp_key_val.lua:  local cst_val_buf = assert(ffi.cast(val_cast_as, get_ptr(val_buf)))
MDB/lua/mk_comp_key_val.lua:  local c_in_dim_vals = ffi.cast("uint8_t **", get_ptr(buf_in_dim_vals))
MDB/lua/mk_comp_key_val.lua:        c_in_dim_vals[i-1] = ffi.cast("uint8_t *", get_ptr(chunk[i]))
MDB/test/test_c_mk_comp_key_val.lua:in_dim_vals = ffi.cast("uint8_t **", get_ptr(in_dim_vals))
MDB/test/test_c_mk_comp_key_val.lua:  in_dim_vals[i-1] = ffi.cast("uint8_t *",  get_ptr(x))
MDB/test/test_c_mk_comp_key_val.lua:in_measure_val = ffi.cast("float *", get_ptr(in_measure_val))
MDB/test/test_c_mk_comp_key_val.lua:out_key = ffi.cast("uint64_t *", get_ptr(out_key))
MDB/test/test_c_mk_comp_key_val.lua:out_val = ffi.cast("float *", get_ptr(out_val))
MM/lua/mv_mul.lua:      cst_z_buf = ffi.cast(z_ctype .. " *", get_ptr(z_buf))
MM/lua/mv_mul.lua:      cst_y_buf = ffi.cast(y_ctype .. " *", get_ptr(yptr))
MM/lua/mv_mul.lua:      Xptr[xidx-1] = ffi.cast(x_ctype .. " *", get_ptr(xptr))
SORT2/lua/sort2.lua:  local casted_x_chunk = ffi.cast(qconsts.qtypes[x:qtype()].ctype .. "*", get_ptr(x_chunk))
SORT2/lua/sort2.lua:  local casted_y_chunk = ffi.cast(qconsts.qtypes[y:qtype()].ctype .. "*", get_ptr(y_chunk)) 
SORT2/test/test_sort2_asc_I4.lua:  local casted_a_chunk = ffi.cast("void *",  get_ptr(a_chunk))
SORT2/test/test_sort2_asc_I4.lua:  local casted_b_chunk = ffi.cast("int32_t *",  get_ptr(b_chunk))
TOPK/lua/expander_topk.lua:      local in_chunk = ffi.cast(fin_ctype .. "*",  get_ptr(fin_chunk))
UNIQUE/lua/expander_unique.lua:      local casted_in_chunk = ffi.cast( subs.in_ctype .. "*",  get_ptr(in_chunk))
UNIQUE/lua/expander_unique.lua:      local casted_unq_buf = ffi.cast( subs.in_ctype .. "*",  get_ptr(out_buf))
UNIQUE/lua/expander_unique.lua:      local casted_cnt_buf = ffi.cast( "int64_t *",  get_ptr(cnt_buf))
UNIQUE/lua/expander_unique.lua:      local casted_in_B1_chunk = ffi.cast( "uint64_t *", get_ptr(in_B1_chunk))
UNIQUE/lua/expander_unique.lua:        casted_sum_buf = ffi.cast( "int64_t *",  get_ptr(sum_buf))
UNIQUE/test/test_unique_C_code.lua:  local casted_a_chunk = ffi.cast( "int32_t *",  get_ptr(a_chunk))
UNIQUE/test/test_unique_C_code.lua:  local casted_out_buf = ffi.cast( "int32_t *",  get_ptr(out_buf))
WHERE/lua/expander_where.lua:      local cst_a_chunk = ffi.cast(cst_a_as, get_ptr(a_chunk))
WHERE/lua/expander_where.lua:      local cst_b_chunk = ffi.cast(cst_b_as, get_ptr(b_chunk))
WHERE/lua/expander_where.lua:      local cst_out_buf = ffi.cast(cst_a_as, get_ptr(out_buf))
