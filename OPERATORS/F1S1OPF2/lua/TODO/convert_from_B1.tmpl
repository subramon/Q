return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include "_get_bit_u64.h"
#include "_set_bit_u64.h"

extern int
${fn}(
      const uint64_t * const restrict in,
      uint64_t nR,
      ${out_ctype} * restrict out
      )
;

   ]],
   definition = [[

#include "_${fn}.h"

int
${fn}(
      const uint64_t * const in,
      uint64_t nR,
      ${out_ctype} * restrict out
      )

{
  int status = 0;
  if ( in == NULL ) { go_BYE(-1); }
  if ( nR == 0 ) { go_BYE(-1); }

#pragma omp parallel for schedule(static)
  for ( uint64_t i = 0; i < nR; i++ ) {
    ${out_ctype} out_val = get_bit_u64(in, i);
    out[i] = out_val;
  }
BYE:
  if ( status < 0 ) { WHEREAMI; }
  return status;
}
   ]]
}

