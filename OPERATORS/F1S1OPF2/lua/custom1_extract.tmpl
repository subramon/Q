return require 'Q/UTILS/lua/code_gen' {
   declaration = [[
#include <math.h>
#include <omp.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include "q_macros.h"
#include "qtypes.h"
//START_FOR_CDEF
extern int
${fn}(  
      const custom1_t   * restrict X,  
      uint32_t nR,
      float * restrict Y,
      bool * restrict nn_Y
      ) ;
//STOP_FOR_CDEF
;
   ]],
   definition = [[
#include "${fn}.h"
int
${fn}(  
      const custom1_t   * restrict X,  
      uint32_t nR,
      float * restrict Y,
      bool * restrict nn_Y
      )
{
  int status = 0;
// #pragma omp parallel for schedule(static, ${chunk_size})
  for ( uint32_t i = 0; i < nR; i++ ) {  
    bfloat16 inval = X[i].${fld}; 
    uint64_t bmask = X[i].bmask;
    if ( bmask & ( ((uint64_t)1) << ${shift_by} ) == 0 ) { 
      Y[i] = 0;
      nn_Y[i] = 0;
    }
    else { 
      Y[i] = F2_to_F4(&inval); 
      nn_Y[i] = 1;
    }
  } 

  return status;
}
   ]]
}
