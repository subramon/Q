return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include "q_macros.h"
//START_FOR_CDEF
extern int
${fn}(  
      const ${f1_ctype} * restrict in,  
      uint64_t nR,
      ${f1_ctype} *ptr_sval,
      ${f2_ctype} * out
      ) 
//STOP_FOR_CDEF
;

   ]],
   definition = [[

#include "${fn}.h"

int
${fn}(  
      const ${f1_ctype} * restrict in,
      uint64_t nR,  
      ${f1_ctype} *ptr_sval,
      ${f2_ctype} * out
      )

{
  int status = 0;

  if ( in == NULL ) { go_BYE(-1); }
  if ( out == NULL ) { go_BYE(-1); }
  if ( ptr_sval == NULL ) { go_BYE(-1); }
  if ( nR == 0 ) { go_BYE(-1); }
  ${f1_ctype} sval = *ptr_sval;

#pragma omp parallel for schedule(static, 1024)
  for ( uint64_t i = 0; i < nR; i++ ) { 
    ${f1_ctype} a = in[i]; 
    ${f1_ctype} b = sval; 
    ${f2_ctype} c; 
    ${c_code_for_operator}
    out[i] = c;
  } 
  BYE:
  return status;
}
   ]]
}
