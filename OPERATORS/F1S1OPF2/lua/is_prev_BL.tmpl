return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include "set_bit_u64.h"

//START_FOR_CDEF
extern int
${fn}(  
      const ${in_ctype} * const  in,  
      uint64_t nR,
      bool default_val,
      bool is_first,
      bool * restrict out,  
      ${in_ctype} *ptr_last_val_prev_chunk
      ) 
;
//STOP_FOR_CDEF

   ]],
   definition = [[

#include "${fn}.h"

int
${fn}(  
      const ${in_ctype} * const in,  
      uint64_t nR,
      bool default_val,
      bool is_first,
      bool * restrict out,  
      ${in_ctype} *ptr_last_val_prev_chunk
      )

{
  int status = 0;

  //-- Some basic checks
  if ( nR  == 0 ) { go_BYE(-1); }
  if ( in  == NULL ) { go_BYE(-1); }
  if ( out == NULL ) { go_BYE(-1); }
  //---------------------------------
  if ( is_first ) {
    out[0] = default_val; 
  }
  else {
    out[0] = (*ptr_last_val_prev_chunk ${cmp_op} in[0]);
  }
  for ( uint64_t i = 1; i < nR; i++ ) { 
    out[i] = (in[i] ${cmp_op} in[i-1]);
    if ( out[i] ) { printf("i = %d\n", i); }
  }
  *ptr_last_val_prev_chunk = in[nR-1];
BYE:
  return status;
}
   ]]
}
