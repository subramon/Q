return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include "_set_bit_u64.h"
#include "_get_bit_u64.h"

extern int
${fn}(  
      const ${in_ctype} * const restrict in,  
      uint64_t nR,
      uint64_t * out
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

int
${fn}(  
      const ${in_ctype} * const restrict in,  
      uint64_t nR,  
      uint64_t * out
      )

{
  int status = 0;
  if ( in == NULL ) { go_BYE(-1); }
  if ( nR == 0 ) { go_BYE(-1); }

#pragma omp parallel for schedule(static)
  for ( uint64_t i = 0; i < nR; i++ ) { 
    ${in_ctype} in_val = in[i];
    uint64_t out_val;
    if ( ( in_val != 0 ) && ( in_val != 1 ) ) {
      status = -1;
      out_val = 0;
    }
    out_val = in_val;
    set_bit_u64(out, i, out_val);
  } 
BYE:
  return status;
}
   ]]
}
