return require 'Q/UTILS/lua/code_gen' {
   declaration = [[
#include <math.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include "q_macros.h"
#include "get_bit_u64.h"
//START_FOR_CDEF
extern int
${fn}(  
      const ${f1_ctype} * const restrict in,
      uint64_t nR,
      void *dummy,
      ${f2_ctype} * restrict out
      ) 
;
//STOP_FOR_CDEF
   ]],
   definition = [[

#include "${fn}.h"
int
${fn}(  
      const ${f1_ctype} * const restrict in,
      uint64_t nR,
      void *dummy,
      ${f2_ctype} * restrict out
      )
{
  int status = 0;
  // Using ceil operator because this will include the last 64 bit chunk for the processing 
  // though there might be some unused bits in last 64 bit chunk but vector code is taking care of it (not using those bits).
  uint64_t loop_count = ceil((double)nR / 64);
  if ( in == NULL ) { go_BYE(-1); }
  if ( nR == 0 ) { go_BYE(-1); }

#pragma omp parallel for schedule(static)
  for ( uint64_t i = 0; i < loop_count; i++ ) {
    //TODO P3: Do not modify unused bits from last 64 bits
    out[i] = ~ in[i];
  }
BYE:
  if ( status < 0 ) { WHEREAMI; }
  return status;
}
   ]]
}
