return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
//START_FOR_CDEF
extern int
${fn}(  
      bool * restrict const x, // condition field 
      ${wctype} * restrict const y, // input field 1
      bool * restrict const nn_y, 
      const ${wctype} * const ptr_sval_z, // scalar val
      bool * restrict const dummy, 
      ${wctype} * restrict const w, // output field
      bool * restrict const nn_w, 
      uint32_t n
      );
//STOP_FOR_CDEF
   ]],
   definition = [[

#include "${fn}.h"

int
${fn}(  
      bool * restrict const x, // condition field 
      ${wctype} * restrict const y, // input field 1
      bool * restrict const nn_y, 
      const ${wctype} * const ptr_sval_z, // scalar val
      bool * restrict const dummy, 
      ${wctype} * restrict const w, // output field
      bool * restrict const nn_w, 
      uint32_t n
      )
{
  int status = 0;
  if ( n == 0 ) { go_BYE(-1); }
  if ( x == NULL ) { go_BYE(-1); }
  if ( y == NULL ) { go_BYE(-1); }
  if ( ptr_sval_z == NULL ) { go_BYE(-1); }
  if ( w == NULL ) { go_BYE(-1); }
  register ${wctype} sval_z = *ptr_sval_z;

#pragma omp parallel for schedule(static, 256)
  for ( uint32_t i = 0; i < n; i++ ) { 
    if ( nn_w != NULL ) { nn_w[i] = true; }
    if ( x[i] ) { 
      w[i] = y[i];
      if ( ( nn_y != NULL ) && ( nn_y[i] == false ) ) {
        if ( nn_w != NULL ) { nn_w[i] = false; }
      }
    }
    else {
      w[i] = sval_z;
    }
  }
BYE:
  return status;
}
   ]]
}
