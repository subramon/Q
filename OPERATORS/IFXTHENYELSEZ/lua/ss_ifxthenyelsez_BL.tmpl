return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
//START_FOR_CDEF
extern int
${fn}(  
      const bool * restrict const x, // condition field 
      const ${wctype} * const ptr_sval_y, // scalar val
      const bool * const nn_y,
      const ${wctype} * const ptr_sval_z, // scalar val
      const bool * const nn_z,
      ${wctype} * restrict const w, // output field
      const bool * const nn_w,
      uint32_t n
      );
//STOP_FOR_CDEF
   ]],
   definition = [[

#include "${fn}.h"

int
${fn}(  
      const bool * restrict const x, // condition field 
      const ${wctype} * const ptr_sval_y, // scalar val
      const bool * const nn_y,
      const ${wctype} * const ptr_sval_z, // scalar val
      const bool * const nn_z,
      ${wctype} * restrict const w, // output field
      const bool * const nn_w,
      uint32_t n
      )
{
  int status = 0;
  if ( n == 0 ) { go_BYE(-1); }
  if ( x == NULL ) { go_BYE(-1); }
  if ( ptr_sval_y == NULL ) { go_BYE(-1); }
  if ( ptr_sval_z == NULL ) { go_BYE(-1); }
  if ( w == NULL ) { go_BYE(-1); }
  if ( nn_y != NULL ) { go_BYE(-1); } 
  if ( nn_z != NULL ) { go_BYE(-1); } 
  if ( nn_w != NULL ) { go_BYE(-1); } 
  ${wctype} sval_y = *ptr_sval_y;
  ${wctype} sval_z = *ptr_sval_z;

#pragma omp parallel for schedule(static, 1024)
  for ( uint32_t i = 0; i < n; i++ ) { 
    if ( x[i] ) { 
      w[i] = sval_y;
    }
    else {
      w[i] = sval_z;
    }
  }
BYE:
  return status;
}
   ]]
}
