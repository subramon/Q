
As we build out Q, we will break the developmemnt into small parts, each of
which will have a Hello World style sample program. Examples are

1) how to pass data from C to Lua and back

2) how does Lua do garbage collection of data malloc'd by C

3) and so on.

For each of these, please create a separate directory with 

1) a README which describes what you are trying to establish

2) sample code which can be executed

3) try and be as complete as possible in terms of proving what you are
trying to establish. For example, if the aim is figure out how to get
a C function invoked by Lua to return a C value which can be stored as
a Lua variable, then do all try all types that we care about. In the
process you might discover limitations. For example, since Lua has a
number type (which is actually a double) which is used for both
integers and floating point, then chances int64_t C value will get
mangled when converted to a Lua variable.

4) In other words, what are the "gotchas"? What are the workarounds,
if aany, or do we just accept these as limitations.

5) Sometimes, there are a set of manual steops to be run to see what
is going on. For example, we wanted to convince ourselves that Lua was
in fact garbage collecting data for objects that contained a reference
to data malloc'd by C that had gont out of scope. This required
running top, ps, ...

Bottom line: Do whatever is needed to clearly establish the
correctness and completeness of the point you are trying to make.

One of the important values of a reference implementation is for a
newbie to Q to be able to learn the system in bite-sized chunks.

Lastly, the reference implementation must always represent our latest
and best understanding of the problem. For example, how to invoke C
from Lua using Dyncall will be an area of constant improvement. But at
any point in time, the reference implementation is what we believe is
the best thing we can do.
