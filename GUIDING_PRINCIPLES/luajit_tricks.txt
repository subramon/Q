 Ramesh: I am going to make a difficult decision, favoring immediate 
 expediency for long term portability.  Basically, decision is to tie 
 ourselves to LuaJIT. This means we do *NOT* use features of Lua that 
 come after 5.3.1

 Andrew: I think the value terra brings alone is probably worth that. 


1. Converting number to C's float/int/double and back

Consider two functions with prototypes int f_one(int x); and float f_two(float x); In luajit there exists only 1 type, number which should work with both of them. Therefore when making calls to either of these two prototypes the "number" is mapped to a double, which is then coerced to the type int and float respectively. Also note that the return value is converted back to the number type natively.

2. Adding lua numbers to different types C buffers (in binary format)
The simplest remedy, is to use point 1 and have a function that takes an array and writes out the correct type value at the correct index, but things can be easier than that.

Luajit supports array indexing and values can be set at certain offsets. When a value is set using this convention, the value is coerced to the appropriate "C value" and saved in binary at that location. 

3. Casting types
Luajit allows us to cast memory as any data type it knows about (including structs). This allows us to have a single buffer (instead of 1 or each type) into which data can be written and decoded appropriately.


Conversion rules: http://luajit.org/ext_ffi_semantics.html (Conversions from Lua
objects to C types) 

--============ When to use C functions and when not to 
ffi.copy(dst, src, len)
ffi.copy(dst, str)

Copies the data pointed to by src to dst. dst is converted to a "void *" and src is converted to a "const void *".

In the first syntax, len gives the number of bytes to copy. Caveat: if src is a Lua string, then len must not exceed #src+1.

In the second syntax, the source of the copy must be a Lua string. All bytes of the string plus a zero-terminator are copied to dst (i.e. #src+1 bytes).

Performance notice: ffi.copy() may be used as a faster (inlinable) replacement for the C library functions memcpy(), strcpy() and strncpy().
 
