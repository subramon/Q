Instead of if ( x == nil ) or if ( x ~= nil ), go with 
if ( not x ) then or if ( x ) then 
====================
Here is another coding convention - do not have unnecessary asserts. e.g.,
assert( (dict_metadata ~= nil and type(dict_metadata) == "table" ) ,
  "Dictionary metadata should not be empty”)
could have been
assert( type(dict_metadata) == "table" , "Dictionary metadata should not be empty)
====================
all print messages to screen should use log.lua 
Way to use it 
local log = require ‘log’
log.info(“simple statement”)
log.fatal(“all hell has broken loose”)

6 types are
log.trace(...)
log.debug(...)
log.info(...)
log.warn(...)
log.error(...)
log.fatal(...)
====================

Not quite a convention but try and have as few ways of doing something
as possible. for example, we are using penlight for several
file/directory related functions. Don't invent on your own. Look at
UTILS/lua/*.lua before you roll your own. Conversely, if you do roll
your own, please offer it up for common usage.

====================

Format for "require"
require is lua's construct that enables you to load and run libraries.
When we load and run a library, our convention dictates that we do no pollute
the global namespace. There are enought reasons spanning from performance, to
just horrible mistakes. 
Based on the above idea files should be like
/*string.lua*/
return local function(x)
    return tostring(x)
end
/* */
/* mod.lua */
local my_mod = {}
function my_mod.p ()
    return 1
end
function my_mod.y(x)
    return x + 1
end
return my_mod
/* */ 
To use these two we would use
local string = require("string")
local mod = require("my_mod")

In general nothing every updates the _G table except for globals.lua and
init.lua . 


In addition if Q binds to your lua file (eg using require) then the
file must not have a preamble, else it may have a preamble. The preamble is
essentially the part that sets package paths. Therefore its ok to edit the
preamble in your test code (it binds to Q but Q does not bind to it)


