Here is what I found. Seems like we should not specify relative paths. Just give
the lib name example ffi.load(“foo.so”) . In that case it would look for
libfoo.so (reason i specified .so was that otherwise on windows it would look
for libfoo.dll and mac libfoo.dylib) . The search will be in the LD_LIBRARY_PATH
. We should add all of these to an env variable for our lua script

Here is the exact snippet from Luajit

clib = ffi.load(name [,global])
This loads the dynamic library given by name and returns a new C library
namespace which binds to its symbols. On POSIX systems, if global is true, the
library symbols are loaded into the global namespace, too.
If name is a path, the library is loaded from this path. Otherwise name is
canonicalized in a system-dependent way and searched in the default search path
for dynamic libraries:
On POSIX systems, if the name contains no dot, the extension .so is appended.
Also, the lib prefix is prepended if necessary. So ffi.load("z") looks for
"libz.so" in the default shared library search path.
On Windows systems, if the name contains no dot, the extension .dll is appended.
So ffi.load("ws2_32") looks for "ws2_32.dll" in the default DLL search path.

