When I was running with require 'strict, I got this error
qjit: /home/ubuntu/Q/RUNTIME/VCTR/lua/lVector.lua:830: bad argument #1 to 'is' (Vector expected, got nil)
Disappeared without strict


Things like mem_allowed should be on a per tbsp basis 


Handle the fact that max length of vector name is set in
~/Q/QJIT/HMAPS/VCTR/inc/ but should be checked by 
functions such as load_csv()

Also, remember that adding "nn_" means that actual length 
of name of vector is 3 less than MAX_LEN_VCTR_NAME

Make sure that nop does not cause error unless it should. See below
Chunk 0 not found
Line  27 of File chnk_nop.c
Line  32 of File vctr_nop.c
Line 287 of File cVector.c
ERROR Freeing resources of chunk 24:2
======
make sure ss is working in ifxthenyelsez

Check that sort sets the sort order
Include dump_empty in load_bin - some strange error right now

https://github.com/lemire/clhash/

Test load_csv_par

Consider as alternative to strict
http://lua-users.org/wiki/DetectingUndefinedVariables

Handle const pointers uniformly based on
https://stackoverflow.com/questions/14562845/why-does-passing-char-as-const-char-generate-a-warning

Consider parallelizing SC_to_lkp. Maybe write a C version that 
does binary search on strings

Consider conjoining reducers

Merge AINB and GET and delete things that aren't needed any more

Should we use -flto? https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html

-- In Scalar, some are modified in place and some are not
-- Have some way of being consistent about this 

-- In cVector.c and scalar.c, when we have an error condition
-- are we popping things off the stack as we should be?


Use shell script to run test_save/test_restore 

save meta_data in Q.save() e.g., sort_order

===================
Saving when is_lma == true, what do we do with chunk mem?

Why is there no matching decr_ref_count for incr_ref_count

Delete following from lVector.lua. 
Not good to have info on both C and Lua side. 
Keep it in C even if there is a cost of crossing C API to fetch it 

Make the C implementation of print_csv the default

Confirm that updates and gets do not cause movements in hashmap


Why does dlclose() not work some times? I have commented it out 
in TMPL_FIX_HASHMAP

The build system has a special target for an amalgamated build, i.e. make amalg. This compiles the LuaJIT core as one huge C file and allows GCC to generate faster and shorter code. Alas, this requires lots of memory during the build. This may be a problem for some users, that's why it's not enabled by default. But it shouldn't be a problem for most build farms. It's recommended that binary distributions use this target for their LuaJIT builds.

The tl;dr version of the above:

make amalg PREFIX=/usr && \
make install PREFIX=/usr DESTDIR=/tmp/buildroot
===================================================
Memory manager (prefetch calls) should run in separate thread

Should we initialize memory to 0?
subramon@pi4:~/Q/RUNTIME/VCTRS/test/TEST_IMPORT/data $ od -v -i _100000_200000
0000000         123         123         123       23761
0000020 -1227737080 -1227737080           0           0
0000040           0           0           0           0
0000060           0           0           0           0
--=====================================

Bring ISPC back to life
Bring OpenMP back to life
Do some code reviews of save() and import() 
In import, document that order of import is important. Understand why 

Experiment with prefetch

Write some tests on memory usage with kill

where do we keep max_num_in_chunk? Lua or C. Be consistent
What of init_globals() needs to be saved in Q.save() 
  and restored after that
What happens if you restore but do not save. Do files get deleted?
Or does the persist persist (hah!)

#=======================
Document how we use TMPL_FIX_HASHMAP 

Collaborate with Utpal on user interface. See RBC/gam/


F1S1OPF2
How to use ispc for bits? See if this helps
https://software.intel.com/content/www/us/en/develop/blogs/processing-arrays-of-bits-with-intel-advanced-vector-extensions-512-intel-avx-512.html
--=================
Check whether we have implemented essence of F1F2OPF3/expander_f1f2opf3.txt
--=================
Check whether we have implemented essence of F1F2OPF3/expander_f1f2opf3.txt
--=================
Verify that extra bits are zeroed out for vveq and vseq and so on
Low priority: convert QC_FLAGS to QCFLAGS and QLDFLAGS

DONE Experiment with alternating control of qjit with webserver
DONE Write some tests on memory usage with different memo len
DONE Basic test of webserver and out-of-band-server
DONE Bring webserver back to life
DONE Bring out-of-band server back to life
DONE g_dsk_used should be checked/restored upon restore session
DONE Make sure that g_dsk_used is intialized on restore session
DONE g_dsk_used is not changed by import session
