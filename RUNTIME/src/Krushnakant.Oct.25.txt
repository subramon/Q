Responses are prefixed by ****

I was looking at recent changes in vector, had below doubts/questions. Could you please look into it. (Sorry, it's bit lengthy)

## In is_file_size_ok() function from core_vec.c 
- I think we don't require second condition in "&&" on line 29 for B1
**** => Agreed. Please review change
- Also can we make else part generic so that we don't require 'num_elements' argument to this function?
**** => I don't think so. This is because last chunk is written to file as soon as eov is got but otherwise chunk is written to file only when we go to next chunk. Think about it and we can discuss more.

## In vec_new() function from core_vec.c, we don't require line number 378 i.e 
ptr_vec->is_nascent = true;
as we are initializing it explicitly in vec_nascent and vec_materialized
***=> Agreed. Deleted the line

## In vec_materialized() from core_vec.c, we don't require check regarding num_elements before it's initialization, line number 223
if ( ptr_vec->num_elements != 0 ) { go_BYE(-1); }
***=> Agreed. Deleted the line

## Why do we require rs_mmap and rs_munmap in vec_materialized? 
If it's purpose is to get file size then we can use function get_file_size() instead of rs_mmap.
**** => I agree. Please make the change. I think that in an earlier version, we were opening the file and setting map_addr and map_len right away. Now we are leaving it in open_mode = 0 and opening only on demand.

## Is my understanding of state change is correct
is_nascent = true, is_eov = false (nascent vector without eov())
is_nascent = true, is_eov = true (nascent vector, after eov() call)
is_nascent = false, is_eov = true (file_mode or start_write call or materialized vec)

*** => Agreed
## In vec_check() function from core_vec.c, we have empty if block on line 459, are we planning to put something there?

****=> Deleted the line

## As per my understanding, open_mode is not relevant for nascent vector with is_nascent = true and is_eov = false, am I correct?
If yes, then why do we have check in vec_check() from  core_vec.c about open_mode for above case on line number 486?

****=> It is irrelevant, I agree. But I just like to tighten the constraints as much as possible. Tell me if you think it is wrong.
## In vec_get() from core_vec.c, do we require check at line number 573?
  if ( len == 0 ) {
    // Providing len == 0 => vector must be materialized, we want everything
    if ( !ptr_vec->is_eov ) { go_BYE(-1); }
    if ( ptr_vec->is_nascent ) { go_BYE(-1); }
  }
second if check in main if block.
With current design, len = 0 condition is allowed for vector with state is_nascent = true and is_eov = true, am I correct?

***=> Yes it is but please add a test case (with above comment as part of the documenation) that makes sure that you *cannot* create a vector with 0 elements i.e., should return nil as in Lines 405-409 of lVector.lua.

/*
    if ( self:length() == 0 ) then 
      return nil 
    else 
      self:eov() 
    end
*/

**** => I don't know if I am making this change everywhere but if we ever create a vector of length 0, then we should have the lVector call return nil. I am wondering whether we should wipe out the vector struct as well? What say?

## I will try read operation for B1 materialized vector.
I think we need to divide idx by 8 (line number 641 else condition, B1 case is not considered), I will check and verify

## In vec_get() method from core_vec.c on line number 670, if and else block needs to be interchanged 
****=> Done

## vec_start_write() from core_vec.c on line number 837 - 
following condition should not be there
( ptr_vec->is_nascent == false )
as per my understanding, start_write is allowed even when vector state is is_nascent == true and is_eov == true. is it?

****=> No. This is a constraint we are placing on Vector i.e. that you can  only write going forward. You cannot go back and change anything you have written. 
Inspired by Omar Khayyám

“The Moving Finger writes; and, having writ,
Moves on: nor all thy Piety nor Wit
Shall lure it back to cancel half a Line,
Nor all thy Tears wash out a Word of it.”

## In vec_nascent() from core_vec.c, I think we should uncomment line number 354 
// not needed 'cos done at vec_new() ptr_vec->is_eov     = false;
for nascent vector before eov, we should set is_eov to false explicitly.

****=> Let us discuss this. Not sure I agree with you.

- In chunk() method from lVector.lua at line number 516 - why do we require below condition, we are already calling eov() on line number 525
    if ( buf_size == 0 ) then
      self:eov()
      if ( qconsts.debug ) then self:check() end
      return 0
    end

****=> Agreed. Please review change.
- In make_nulls() from lVector.lua on line number 209, why are we setting meta-data "num_nulls" without any value? I think if we are setting the "num_nulls" meta then we should provide the value as well.

***=> I meant to write has_nulls. Have changed it.

## Why size of sz_str_for_lua changed to 128 from 1024 * 1024 in q_consts.lua?
128 will be small.

**** => My mistake. Please set it back to 1048576

## set_bit and get_bit entries are removed from UTILS/src/Makefile and set_bit.c moved to DEPRECATED, any reason behind it. load_csv.lua was using it.


**** => My mistake. I thought they were not needed. Please "git mv" them back to where they should be. May need to update Makefiles to generate .h files as well. Let me know if you need me to do it.
