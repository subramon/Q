See files *gc* in this directory for context

Hi Ramesh,

Just some quick thoughts... (referring to gc_bar.lua)... 
Below is deliberately more of a thinking-aloud verbose format, kindly bear with me...  

From perspective of the Lua language/runtime, x can and will be garbage collected because there's no reference to it. 

The notion that there's another Lua variable that's pointing to same location is in the mind of the C programmer - not something the Lua runtime can divine?

So, I think this is valid behavior. If we want to avoid this, I'm thinking we should remove the finalizer call to ffi.C.free ? Instead, in this case, we want the memory to be freed when y is no longer in action, so we should associate the GC finalizer call with y instead; and I would expect  y to be held alive by the closure of the setter/getter methods. Only when those two methods are dead, should/will y be garbage collected... which I think is what we need here...

I suppose this was distilled from the real-life issue, so will attempt to generalize the learning here in hope it will be applicable to the original issue as well. 

When writing Lua code, we should think as purely Lua developers and see object graph linkages from Lua object perspective only. But this might cause issues in modular design e.g. we might typically create the x in one module and the y in another - how to handle such cases?

Looking at the ffi.gc docs there's a way to unset a finalizer - by setting it to nil. 

Now, if y needs the right to be able to access the C-alloc'ed location (CAL) regardless of x's demise, it also needs to take on the responsibility for the CAL. So I would think in such cases, when y decides to adopt CAL over from x, y's init should also set x's finalizer to nil. 

local y = ffi.gc(ffi.cast("int *", ffi.gc(x, nil)), ffi.C.free) 
 
In this manner, as a developer, I'm also clear about who owns the CAL in the Lua world.

Does this make sense? And if yes, will it help in the real/original bug/issue as well?

Thanks,
Srinath.
Principal Architect | +91 9850716722

Great Software Laboratory | www.gslab.com
LinkedIn | Twitter | Email Disclaimer
